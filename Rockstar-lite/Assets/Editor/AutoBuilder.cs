/* AutoBuilder.csAutomatically changes the target platform and creates a build. InstallationPlace in an Editor folder. UsageGo to File > AutoBuilder and select a platform. These methods can also be run from the Unity command line using -executeMethod AutoBuilder.MethodName. LicenseCopyright (C) 2011 by Thinksquirrel Software, LLC Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */using UnityEngine;using UnityEditor;using System.Collections;using System.Collections.Generic;using System.IO; public static class AutoBuilder { 	static string GetProjectName()	{		string[] s = Application.dataPath.Split('/');		return s[s.Length - 2];	} 	static string[] GetScenePaths()	{		string[] scenes = new string[EditorBuildSettings.scenes.Length]; 		for(int i = 0; i < scenes.Length; i++)		{			scenes[i] = EditorBuildSettings.scenes[i].path;		} 		return scenes;	}	[MenuItem("AutoBuilder/Android APK export")]	static void PerformAndroidBuild () {		EditorUserBuildSettings.SwitchActiveBuildTarget(BuildTarget.Android);		BuildPipeline.BuildPlayer(GetScenePaths(), "../Android/Rockstar.apk", BuildTarget.Android,BuildOptions.None);	}		[MenuItem("AutoBuilder/Android Project Build Step")]	static void androidBuild () {		Debug.Log("Command line build android version\n------------------\n------------------");		// string[] scenes = GetBuildScenes();		string[] scenes = GetScenePaths();		//string path = GetBuildPathAndroid();		string path = "../Android/UnityExport";		if(scenes == null || scenes.Length==0 || path == null)			return;		Debug.Log(string.Format("Path: \"{0}\"", path));		for(int i=0; i<scenes.Length; ++i)		{			Debug.Log(string.Format("Scene[{0}]: \"{1}\"", i, scenes[i]));		}		Debug.Log("Starting Android Build!");		BuildPipeline.BuildPlayer(scenes, path, BuildTarget.Android, BuildOptions.AcceptExternalModificationsToPlayer);		// BuildPipeline.buil	}}